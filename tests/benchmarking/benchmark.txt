# Baseline
Benchmark: 47.65844087132541 Ticks per second. Samples: 1000
Benchmark: 48.637536834117874 Ticks per second. Samples: 1000
Benchmark: 48.311431553764486 Ticks per second. Samples: 10000

# Updated to cuda 10.1, which should give GPU support
# (no inference is being done yet, I'm just verifying
# that it doesn't randomly slow something down)
Benchmark: 48.203584680066555 Ticks per second. Samples: 1000

# CUDA_VISIBLE_DEVICES='', tensorflow-gpu
Benchmark: 0.501 Ticks per second. Samples: 10
Benchmark: 0.492 Ticks per second. Samples: 10

# Actually run inference (package: tensorflow-gpu)
Benchmark: 0.437 Ticks per second. Samples: 10
Benchmark: 0.441 Ticks per second. Samples: 10

# Actually run inference (package: tensorflow)
Benchmark: 0.431 Ticks per second. Samples: 10
Benchmark: 0.443 Ticks per second. Samples: 10
Benchmark: 0.434 Ticks per second. Samples: 10

# With ThreadPoolExecutor()
Benchmark: 0.097 Ticks per second. Samples: 10

# With ThreadPoolExecutor(max_workers=1)
Benchmark: 0.39 Ticks per second. Samples: 10
Benchmark: 0.387 Ticks per second. Samples: 10

# Without ThreadPoolExecutor
Benchmark: 0.433 Ticks per second. Samples: 10
Benchmark: 0.418 Ticks per second. Samples: 10
Benchmark: 5.263 Ticks per second. Samples: 10
Benchmark: 0.23 Ticks per second. Samples: 10

# Added a 1 tick warmup before the benchmark. Made a tf.function wrapping the agent.get_move()
Benchmark: 1.861 Ticks per second. Samples: 10
Benchmark: 1.901 Ticks per second. Samples: 100

# with CUDA_VISIBLE_DEVICES=''
Benchmark: 2.195 Ticks per second. Samples: 100

# Remove the "agent" argument from the function
Benchmark: 2.382 Ticks per second. Samples: 20
Benchmark: 2.144 Ticks per second. Samples: 20
Benchmark: 1.895 Ticks per second. Samples: 20

# Build the TimeStep inside of the tf.function
Benchmark: 2.165 Ticks per second. Samples: 20
Benchmark: 2.373 Ticks per second. Samples: 20
Benchmark: 2.387 Ticks per second. Samples: 20

# Try tf.function(experimental_compile=True)
Benchmark: 2.559 Ticks per second. Samples: 20
Benchmark: 2.557 Ticks per second. Samples: 20

# CUDA_VISIBLE_DEVICES=1
Benchmark: 1.671 Ticks per second. Samples: 20

# CUDA_VISIBLE_DEVICES=''
Benchmark: 2.347 Ticks per second. Samples: 30
Benchmark: 2.475 Ticks per second. Samples: 30

# CUDA_VISIBLE_DEVICES='', ThreadPoolExecutor()
Benchmark: 1.141 Ticks per second. Samples: 30
Benchmark: 1.203 Ticks per second. Samples: 30
# Minor improvements to the ThreadPool logic
Benchmark: 1.604 Ticks per second. Samples: 30


# CUDA_VISIBLE_DEVICES='', ThreadPoolExecutor(max_workers=1)  (should be around 2.3-2.5)
Benchmark: 2.108 Ticks per second. Samples: 30
Benchmark: 2.073 Ticks per second. Samples: 30

# CUDA_VISIBLE_DEVICES='', ThreadPoolExecutor(max_workers=2)
Benchmark: 2.958 Ticks per second. Samples: 30

# CUDA_VISIBLE_DEVICES='', ThreadPoolExecutor(max_workers=3)
Benchmark: 3.061 Ticks per second. Samples: 30
# Don't use wait_for_futures, just call "result" on each future
Benchmark: 3.062 Ticks per second. Samples: 30



# CUDA_VISIBLE_DEVICES='', ThreadPoolExecutor(max_workers=6)
Benchmark: 2.47 Ticks per second. Samples: 30

# CUDA_VISIBLE_DEVICES='', ThreadPoolExecutor(max_workers=4)
Benchmark: 2.859 Ticks per second. Samples: 30

# Compile = false, workers=4
Benchmark: 3.14 Ticks per second. Samples: 30

# CUDA_VISIBLE_DEVICES='', ThreadPoolExecutor(max_workers=3), experimental_compile=None
Benchmark: 3.244 Ticks per second. Samples: 30

# CUDA_VISIBLE_DEVICES=1, ThreadPoolExecutor(max_workers=3), experimental_compile=None
Benchmark: 3.038 Ticks per second. Samples: 30
# Move DISCOUNT to be a constant in the function
Benchmark: 3.038 Ticks per second. Samples: 30

# CUDA_VISIBLE_DEVICES=1, ThreadPoolExecutor(max_workers=3), experimental_compile=True
Benchmark: 2.487 Ticks per second. Samples: 30

# Final benchmarks before commit
Benchmark: 3.052 Ticks per second. Samples: 30  THREADS=4
Benchmark: 3.092 Ticks per second. Samples: 30  THREADS=6
Benchmark: 3.092 Ticks per second. Samples: 30
Benchmark: 3.156 Ticks per second. Samples: 30  THREADS=12